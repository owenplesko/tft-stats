import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import SummonerSearch from "../components/summonerSearch";
import { env } from "~/env.mjs";
import { type Summoner, SummonerSchema } from "~/types/summoner";
import ProfileSummaryCard from "~/components/profileSummaryCard";

export const getServerSideProps: GetServerSideProps = async () => {
  const puuids = [
    "Uvx0KFVS5DrrvFAc52iU4MA17R3RbtEU7PoIC4vZbXparKFupxoDyCGXoVz-KSYWT0TnfyAQE9lAOw",
    "x0U9ERlX4M2QaHdpR522a_9g47NkI8ou-yZ7ec4qhNlsUkH4Nfypatq4yl0BTBStEDb9owLU2L5q3w",
    "ET9mTh-cnH0yqBKrRX9XZEtQJz1cTMPuB46AyctUc858sBkKOJCXw151FXvRPnyus-NSBoki2EnL3Q",
    "JgnblmPcwrZP6Mrj2tToHJVCo_1Q99G_qpN5MjAbt3wgsiD6jtBfsnfX7r0qcO6o9EuSYn0JNPWZnw",
  ];

  const promises = [];
  const summoners = [];

  for (const puuid of puuids) {
    const summoner_url = `${env.NEXT_PUBLIC_BACKEND_URL}/summoner/${puuid}`;
    promises.push(fetch(summoner_url));
  }

  const responses = await Promise.all(promises);
  for (const summoner_res of responses) {
    if (!summoner_res.ok) {
      continue;
    }

    const summoner = SummonerSchema.safeParse(await summoner_res.json());
    if (!summoner.success) {
      continue;
    }

    summoners.push(summoner.data);
  }

  return { props: { summoners: summoners } };
};

const Home: NextPage<{ summoners: Summoner[] }> = ({ summoners }) => {
  return (
    <>
      <Head>
        <title>TFT</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center gap-8 bg-zinc-900">
        <div className="flex w-full justify-center border-b border-zinc-950 p-2">
          <SummonerSearch />
        </div>
        <ul className="grid grid-cols-3 gap-4">
          {summoners.map((s) => (
            <li key={s.puuid}>
              <ProfileSummaryCard summoner={s} />
            </li>
          ))}
        </ul>
      </main>
    </>
  );
};

export default Home;
